@startuml

package domain.permission {

   package model {
       class Resource
       class Role
   }
package repository {
   interface AuthorizationRepo
}

package factory {
    class AuthorizationFactory
 }


package gateway {
    interface KuaidaGateway
    interface AuthorizationGateway
}

package service {
    class AuthorizationDomainService
}

Resource "1" o-left- "n" Role

}


class Resource {
     - String resourceType
     - String resourceId
     - List<RoleEntity> roleEntityList
     - Integer status
     + List<String> summaryUserId(List<Role> roleList)
     + Resource modifyAuthorization(Authorization authorization)
     + List<String> getNeedAddUser(List<String> empIdList)
     + List<String> getNeedDeleteUser(List<String> empIdList)
}

class AuthorizationDomainService {
     + void assignAuthorizationToUser(Authorization authorization)
}


class Role {
     - String bizLine
     - String bizLineId
     - String role
     - String roleId
}
interface AuthorizationRepo  {
    + void establishAuthorizationRelationship(Authorization authorization)
    + void modifyAuthorizationRelationship(Authorization authorization)
    + void deleteAuthorizationRelationship(Authorization authorization)
    + Resource queryByRoot(String resourceId)
}

class AuthorizationFactory {
    + Resource build(AuthorizationBO authorizationBO, List<String> userList)
}

interface KuaidaGateway {
     + void assignAuthorization(Object resourceId, List<String> empIdList)
     + void removeAuthorization(Object resourceId, List<String> empIdList)
     + void queryAuthorizationByResourceId(Object resourceId)
}

interface AuthorizationGateway {
     + List<String> queryAuthByBizLineAndRole(String bizline, String roleId)
}

@enduml