# 分层架构

###分层架构的划分
  - 分层的第一个依据是基于关注点为不同的调用目的划分层次。
  - 分层的第二个依据是面对变化。层与层之间的关系应该是正交的
  - 在进行分层时，我们还应该保证同一层的组件处于同一个抽象层次
* 依赖倒置原则
  * 高层模块不应该依赖于低层模块，二者都应该依赖于抽象
    * 从功能重用的角度看，被依赖方需要为依赖方（调用方）提供功能支撑，所以导致依赖是从上到下传递，但是我们不能忽略变化对系统产生的影响！
    由于抽象更加的稳定，所以应该依赖于抽象
  * 抽象不应该依赖于细节，细节应该依赖于抽象
    * 依赖倒置原则隐含的本质是：我们要依赖不变或稳定的元素（类、模块或层）
* 将分层视为关注点分离的水平抽象层次的体现。
* 过多的层会引入太多的间接而增加不必要的开支，层太少又可能导致关注点不够分离，导致系统的结构不合理。
* 需要正视架构中各层之间的协作关系，打破高层依赖低层的固有思维，从解除耦合（或降低耦合）的角度探索层之间可能的协作关系。
* 我们还需要确定分层的架构原则（或约束），例如是否允许跨层调用，即每一层都可以使用比它低的所有层的服务，而不仅仅是相邻低层。这就是所谓的“松散分层系统（Relaxed Layered System）”。


###分层架构的演进

* 整洁架构
![img.png](img.png)
  * 企业业务规则（Enterprise Business Rules）
  * 应用业务规则（Application Business Rules）
  * 接口适配器（Interface Adapters）
  * 框架与驱动器（Frameworks & Drivers）
  * 注意“企业业务规则”与“应用业务规则”的区别，
    * 前者是纯粹领域逻辑的业务规则，
    * 后者则面向应用，需要串接支持领域逻辑正常流转的非业务功能，通常为一些**横切关注点，如日志、安全、事务**等，从而保证实现整个应用流程（对应一个完整的用例）。

* 

